/* 
 * Copyright (c) 2019 Christen Ford
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the
 *   distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
 * ARCHED ROCK OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE
 */

/**
 * Implements a TinyOS application for reading from sensors on the Telosb.
 * This application operates in two modes: FORWARD and ORIGIN.
 *
 * In ORIGIN mode, the Telosb generates packets and forwards them to the next
 * hop device. Packets correspond to a single sensor type which rotates out
 * with each packet sent.
 *
 * In FORWARD mode, the Telosb receives forwarded packets, generates a sensor
 * reading corresponding to the reading type embedded in the packet, and 
 * appends its reading to the received packet. This packet is then forwarded
 * to the next hop device.
 *
 * This application is dependent on each device in the topology aside from the
 * basestation device being a Telosb as the sensors define in the ReadForwardC
 * component are specific to the Telosb.
 *
 * In reality, the distinction between FORWARD and ORIGIN mode is made by a
 * switch in the ReadForward.h header file. Once I figure out how to do so,
 * the distinction between the two will become a make argument instead so
 * users do not have to fiddle with the header file at all.
 *
 * The default size for message_t is 40 bytes. There are 12 bytes reserved by 
 * the TinyOS system, while the remaining 28 bytes are reserved for the payload.
 * 
 * The format for the payload generated by a Telosb operating in ORIGIN mode is
 * as follows:
 *  nodeid: 1 byte
 *  groupid: 1 byte
 *  hops: 1 byte
 *  rflag: 1 byte
 *  readings: 24 bytes
 *
 * The first 4 bytes in the payload are for bookkeeping purposes. The remaining
 * bytes are used to store reading information. Realistically, each packet is
 * limited to 12 hops max (on Telosb devices) before it is discarded. A received
 * packet will be discarded by the receiving Telosb device if it has hopped more
 * than 12 times.
 *
 * The hops field is used by the application layer application to reconstruct
 * each individual reading from the sensor readings field. Readings are stored
 * in the readings field in Big Endian (Network-order) format.
 *
 * I may switch forwarding to a routing table, but one of my goals is to limit
 * message complexity (number of messages) as much as possible.
 */


#ifndef READFORWARD_H
#define READFORWARD_H

// stores app configuration information
enum {
    TIMER_PERIOD_READ = 250,// the amount of time between readings
    AM_CHANNEL = 0x96,      // the AM channel to broadcast packets on
    FORWARD_ADDR = 0,       // the address to forward to, 0 is the basestation
    DOES_FORWARD = 0,       // 0 = node generates packets, 1 = node forwards them
    NREADINGS = 12          // 12 is the safe max, if sending more you'll need to adjust the size of message_t 
};

// defines reading types, these are bound to a 1-byte flag
enum {
    // define flag rotation mechanisms
    LOWER_FLAG = 0,
    UPPER_FLAG = 40,
    FLAG_STEP = 10,
    // define the flags themselves
    FLAG_TEMPERATURE = 0,
    FLAG_HUMIDITY = 10,
    FLAG_PHOTO_VISIBLE = 20,
    FLAG_PHOTO_INFRARED = 30,
    FLAG_VOLTAGE = 40
};

// the max size of this structure is 28 bytes
typedef struct ForwardPacket {
    nx_int8_t nodeid;   // the id of the origin node
    nx_int8_t groupid;  // the id of the group the origin node belongs to
    nx_int8_t hops;     // the amount of hops taken from origin to destination
    nx_int8_t rflag;    // the type of reading sent
    // all readings take two bytes to store giving us 12 hops altogther
    nx_int16_t readings[NREADINGS];
} readfwd_t;

#endif
