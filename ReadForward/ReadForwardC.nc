/* 
 * Copyright (c) 2019 Christen Ford
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the
 *   distribution.
 * - Neither the name of the Arch Rock Corporation nor the names of
 *   its contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
 * ARCHED ROCK OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE
 */

/**
 * Implements a TinyOS application for reading from sensors on the Telosb.
 * This application operates in two modes: FORWARD and ORIGIN.
 *
 * In ORIGIN mode, the Telosb generates packets and forwards them to the next
 * hop device. Packets correspond to a single sensor type which rotates out
 * with each packet sent.
 *
 * In FORWARD mode, the Telosb receives forwarded packets, generates a sensor
 * reading corresponding to the reading type embedded in the packet, and 
 * appends its reading to the received packet. This packet is then forwarded
 * to the next hop device.
 *
 * This application is dependent on each device in the topology aside from the
 * basestation device being a Telosb as the sensors define in the ReadForwardC
 * component are specific to the Telosb.
 *
 * In reality, the distinction between FORWARD and ORIGIN mode is made by a
 * switch in the ReadForward.h header file. Once I figure out how to do so,
 * the distinction between the two will become a make argument instead so
 * users do not have to fiddle with the header file at all.
 *
 * The default size for message_t is 40 bytes. There are 12 bytes reserved by 
 * the TinyOS system, while the remaining 28 bytes are reserved for the payload.
 * 
 * The format for the payload generated by a Telosb operating in ORIGIN mode is
 * as follows:
 *  nodeid: 1 byte
 *  groupid: 1 byte
 *  hops: 1 byte
 *  rflag: 1 byte
 *  readings: 24 bytes
 *
 * The first 4 bytes in the payload are for bookkeeping purposes. The remaining
 * bytes are used to store reading information. Realistically, each packet is
 * limited to 12 hops max (on Telosb devices) before it is discarded. A received
 * packet will be discarded by the receiving Telosb device if it has hopped more
 * than 12 times.
 *
 * The hops field is used by the application layer application to reconstruct
 * each individual reading from the sensor readings field. Readings are stored
 * in the readings field in Big Endian (Network-order) format.
 *
 * I may switch forwarding to a routing table, but one of my goals is to limit
 * message complexity (number of messages) as much as possible.
 */

#include "ReadForward"

configuration ReadForwardC { }
implementation {
    // Declares the primary components
    components ReadForwardP, MainC, ActiveMessageC, LedsC;
    components new AMSenderC(AM_CHANNEL), new AMReceiverC(AM_CHANNEL);
    components new TimerMilliC() as ReadTimer;

    // Wires up the primary components
    App.Boot -> MainC;
    App.Leds -> LedsC;
    App.RadioControl -> ActiveMessageC;
    App.Packet -> ActiveMessageC;
    App.AMPacket -> ActiveMessageC;
    App.AMSend -> AMSenderC;
    App.Receive -> AMReceiverC;
    App.ReadTimer -> ReadTimer;

    // Declares the sensors
    // These components are Telosa/Telosb specific, not portable
    components new SensirionSht11C() as ThermalSensor;
    components new HamamatsuS1087ParC() as VisibleLightSensor;
    components new HamamatsuS10871TsrC() as InfraredLightSensor;
    // Note: this component is generic, on Telosb it reads from Voltage
    //  to get the value from ADC: 1.) divide by 4096, 2.) multiply by 3
    components new DemoSensorC() as VoltageSensor;

    // Wires up the sensors
    App.ReadHumidity -> ThermalSensor.Humidity;
    App.ReadTemperature -> ThermalSensor.Temperature;
    App.ReadVisibleLight -> VisibleLightSensor;
    App.ReadInfraredLight -> InfraredLightSensor;
    App.ReadVoltage -> VoltageSenser;
}
